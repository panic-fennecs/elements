[gd_scene load_steps=4 format=2]

[ext_resource path="res://src/level/ElementRenderer.gd" type="Script" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode unshaded;

uniform vec2 canvas_size;
uniform sampler2D elements_tex;

float smin( float a, float b, float k )
{
    float h = max( k-abs(a-b), 0.0 )/k;
    return min( a, b ) - h*h*k*(1.0/4.0);
}

float circle(vec2 p) {
	return length(p);
}

void fragment() {
	float aspect_ratio = canvas_size.x / canvas_size.y;
	vec2 uv = vec2(UV.x * aspect_ratio, UV.y);
	COLOR = vec4(0, 0, 0, 1);
	
	//COLOR += d * vec4(.2, .4, .8, 1);
	//COLOR.r += smoothstep(.5, .51, uv.x);
	//COLOR.b += smoothstep(.5, .51, uv.y);
	
	float d = 1000.;
	
	for (int x = 0; x < 128; ++x) {
		vec4 element = texture(elements_tex, vec2(float(x) / 128., .0));
		if (element.b == 0.)
			break;
		d = smin(d, circle(uv - element.xy) - .01, .1);
	}

	COLOR.rgb += vec3(.2, .5, .8) * smoothstep(SCREEN_PIXEL_SIZE.y, .0, d);
	//COLOR.g = d / 10.;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/canvas_size = null

[node name="ElementRenderer" type="Node2D"]
script = ExtResource( 1 )

[node name="Canvas" type="ColorRect" parent="."]
material = SubResource( 2 )
margin_top = 1.0
margin_right = 1028.0
margin_bottom = 606.0
__meta__ = {
"_edit_use_anchors_": false
}
